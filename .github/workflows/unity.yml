name: Build & Deploy the Pepemon Unity Project

on:
  push:
    # Run Tests -> Build -> Deploy on main/release/staging
    branches: [main, release, staging]
  pull_request:
    # Run Tests -> Build on PRs targeting main
    branches: [main]
  workflow_dispatch:
    branches: ['*']

permissions:
  contents: write
  checks: write

jobs:
  # Parallel job strategy (2024 trend)
  test:
    name: Run Unity Tests
    runs-on: ubuntu-latest-4-cores
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    env:
      UNITY_DISABLE_UNITY_HUB: true
      UNITY_EDITOR_MEMORY: 8192  # 8GB for tests
      
    steps:
      - name: Cleanup Docker
        run: |
          docker system prune -af
          docker volume prune -f

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
    
      # Cache Restore
      - uses: actions/cache/restore@v4
        id: test-cache-restore
        with:
          path: Library
          key: test-cache-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            test-cache-

      # Test only
      - name: Run tests
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: 2021.3.12f1
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: all
          
      # Cache Save
      - uses: actions/cache/save@v4
        if: github.ref == 'refs/heads/main' && steps.test-cache-restore.outputs.cache-hit != 'true'
        with:
          path: Library
          key: ${{ steps.test-cache-restore.outputs.cache-primary-key }}

  build:
    name: Build the Pepemon Unity Project  
    runs-on: ubuntu-latest-8-cores  # 8 vCPUs, 32GB RAM - Unity builds love RAM
    needs: test  # Wait for tests only on main
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    concurrency: ci-${{ github.ref }}
    
    # Set resource limits for Unity
    env:
      UNITY_DISABLE_UNITY_HUB: true
      UNITY_EDITOR_MEMORY: 16384  # 16GB for Unity Editor

    steps:
      
      - name: Cleanup Docker
        run: |
          docker system prune -af
          docker volume prune -f

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
      
      # Install sccache for shader compilation caching (2024 trend)
      - name: Install sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/v0.7.4/sccache-v0.7.4-x86_64-unknown-linux-musl.tar.gz
          tar xzf sccache-v0.7.4-x86_64-unknown-linux-musl.tar.gz
          sudo mv sccache-v0.7.4-x86_64-unknown-linux-musl/sccache /usr/local/bin/
          sccache --start-server
        env:
          SCCACHE_CACHE_SIZE: 2G
    
      # Cache Restore for Build
      - uses: actions/cache/restore@v4
        id: build-cache-restore
        with:
          path: Library
          key: build-cache-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            build-cache-
            test-cache-

      # Build with WebGL-specific optimizations
      - name: Build project
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' || github.ref == 'refs/heads/staging'
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: 2021.3.12f1
          targetPlatform: WebGL
          allowDirtyBuild: true
          buildName: pepemon-webgl-${{ github.sha }}
          # CRITICAL: WebGL build parameters for Thirdweb + Web3 compatibility
          customParameters: |
            -quit -batchmode -nographics
            -logFile -

      # Output
      - uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' || github.ref == 'refs/heads/staging'
        with:
          name: Build
          path: build

      - name: Deploy to Dev ðŸ“¦
        uses: JamesIves/github-pages-deploy-action@v4
        if: github.ref == 'refs/heads/main'
        with:
          folder: build/WebGL/WebGL
          target-folder: env/dev

      - name: Deploy to Staging ðŸ§°
        uses: JamesIves/github-pages-deploy-action@v4
        if: github.ref == 'refs/heads/staging'
        with:
          folder: build/WebGL/WebGL
          target-folder: env/staging

      - name: Deploy to Production ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        if: github.ref == 'refs/heads/release'
        with:
          folder: build/WebGL/WebGL
